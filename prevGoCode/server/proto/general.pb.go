// Code generated by protoc-gen-go.
// source: general.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	general.proto

It has these top-level messages:
	Board
	User
	Privilege
	Thread
	Comment
	Course
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Board struct {
	BoardID   string   `protobuf:"bytes,1,opt,name=BoardID" json:"BoardID,omitempty"`
	BoardName string   `protobuf:"bytes,2,opt,name=BoardName" json:"BoardName,omitempty"`
	ThreadIDs []string `protobuf:"bytes,3,rep,name=ThreadIDs" json:"ThreadIDs,omitempty"`
	DocIDs    []string `protobuf:"bytes,4,rep,name=DocIDs" json:"DocIDs,omitempty"`
}

func (m *Board) Reset()                    { *m = Board{} }
func (m *Board) String() string            { return proto1.CompactTextString(m) }
func (*Board) ProtoMessage()               {}
func (*Board) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Board) GetBoardID() string {
	if m != nil {
		return m.BoardID
	}
	return ""
}

func (m *Board) GetBoardName() string {
	if m != nil {
		return m.BoardName
	}
	return ""
}

func (m *Board) GetThreadIDs() []string {
	if m != nil {
		return m.ThreadIDs
	}
	return nil
}

func (m *Board) GetDocIDs() []string {
	if m != nil {
		return m.DocIDs
	}
	return nil
}

type User struct {
	UserID     string       `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	Username   string       `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password   string       `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Privileges []*Privilege `protobuf:"bytes,4,rep,name=Privileges" json:"Privileges,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetPrivileges() []*Privilege {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type Privilege struct {
	CourseName  string `protobuf:"bytes,1,opt,name=CourseName" json:"CourseName,omitempty"`
	CourseID    string `protobuf:"bytes,2,opt,name=CourseID" json:"CourseID,omitempty"`
	AccessLevel string `protobuf:"bytes,3,opt,name=AccessLevel" json:"AccessLevel,omitempty"`
}

func (m *Privilege) Reset()                    { *m = Privilege{} }
func (m *Privilege) String() string            { return proto1.CompactTextString(m) }
func (*Privilege) ProtoMessage()               {}
func (*Privilege) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Privilege) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *Privilege) GetCourseID() string {
	if m != nil {
		return m.CourseID
	}
	return ""
}

func (m *Privilege) GetAccessLevel() string {
	if m != nil {
		return m.AccessLevel
	}
	return ""
}

type Thread struct {
	ThreadName     string     `protobuf:"bytes,1,opt,name=ThreadName" json:"ThreadName,omitempty"`
	ThreadID       string     `protobuf:"bytes,2,opt,name=ThreadID" json:"ThreadID,omitempty"`
	PosterID       string     `protobuf:"bytes,3,opt,name=PosterID" json:"PosterID,omitempty"`
	PosterUsername string     `protobuf:"bytes,4,opt,name=PosterUsername" json:"PosterUsername,omitempty"`
	Content        string     `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	Comments       []*Comment `protobuf:"bytes,6,rep,name=Comments" json:"Comments,omitempty"`
	Timestamp      string     `protobuf:"bytes,7,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Thread) Reset()                    { *m = Thread{} }
func (m *Thread) String() string            { return proto1.CompactTextString(m) }
func (*Thread) ProtoMessage()               {}
func (*Thread) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Thread) GetThreadName() string {
	if m != nil {
		return m.ThreadName
	}
	return ""
}

func (m *Thread) GetThreadID() string {
	if m != nil {
		return m.ThreadID
	}
	return ""
}

func (m *Thread) GetPosterID() string {
	if m != nil {
		return m.PosterID
	}
	return ""
}

func (m *Thread) GetPosterUsername() string {
	if m != nil {
		return m.PosterUsername
	}
	return ""
}

func (m *Thread) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Thread) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Thread) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type Comment struct {
	CommentID      string `protobuf:"bytes,1,opt,name=CommentID" json:"CommentID,omitempty"`
	PosterID       string `protobuf:"bytes,2,opt,name=PosterID" json:"PosterID,omitempty"`
	PosterUsername string `protobuf:"bytes,3,opt,name=PosterUsername" json:"PosterUsername,omitempty"`
	Timestamp      string `protobuf:"bytes,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Content        string `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto1.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Comment) GetCommentID() string {
	if m != nil {
		return m.CommentID
	}
	return ""
}

func (m *Comment) GetPosterID() string {
	if m != nil {
		return m.PosterID
	}
	return ""
}

func (m *Comment) GetPosterUsername() string {
	if m != nil {
		return m.PosterUsername
	}
	return ""
}

func (m *Comment) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Course struct {
	CourseID   string   `protobuf:"bytes,1,opt,name=CourseID" json:"CourseID,omitempty"`
	CourseName string   `protobuf:"bytes,2,opt,name=CourseName" json:"CourseName,omitempty"`
	BoardIDs   []string `protobuf:"bytes,3,rep,name=BoardIDs" json:"BoardIDs,omitempty"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto1.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Course) GetCourseID() string {
	if m != nil {
		return m.CourseID
	}
	return ""
}

func (m *Course) GetCourseName() string {
	if m != nil {
		return m.CourseName
	}
	return ""
}

func (m *Course) GetBoardIDs() []string {
	if m != nil {
		return m.BoardIDs
	}
	return nil
}

func init() {
	proto1.RegisterType((*Board)(nil), "proto.Board")
	proto1.RegisterType((*User)(nil), "proto.User")
	proto1.RegisterType((*Privilege)(nil), "proto.Privilege")
	proto1.RegisterType((*Thread)(nil), "proto.Thread")
	proto1.RegisterType((*Comment)(nil), "proto.Comment")
	proto1.RegisterType((*Course)(nil), "proto.Course")
}

func init() { proto1.RegisterFile("general.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdd, 0x4a, 0xf3, 0x40,
	0x10, 0x25, 0x4d, 0x9a, 0x7e, 0x9d, 0xf2, 0x15, 0xd9, 0x0b, 0x59, 0x44, 0xa4, 0xe4, 0x42, 0xc4,
	0x8b, 0x22, 0xfa, 0x04, 0xda, 0xdc, 0x14, 0x44, 0x4a, 0xd1, 0x7b, 0x63, 0x3b, 0xd4, 0x40, 0x93,
	0x2d, 0xbb, 0x69, 0x7d, 0x05, 0xdf, 0xc3, 0xd7, 0xf3, 0x21, 0x64, 0xf6, 0x2f, 0x3f, 0x54, 0xbc,
	0xca, 0x9c, 0x73, 0x06, 0xce, 0x9c, 0x99, 0x0d, 0xfc, 0xdf, 0x60, 0x89, 0x32, 0xdb, 0x4e, 0x77,
	0x52, 0x54, 0x82, 0xf5, 0xf5, 0x27, 0xd9, 0x43, 0xff, 0x41, 0x64, 0x72, 0xcd, 0x38, 0x0c, 0x74,
	0x31, 0x4f, 0x79, 0x30, 0x09, 0xae, 0x86, 0x4b, 0x07, 0xd9, 0x39, 0x0c, 0x75, 0xf9, 0x94, 0x15,
	0xc8, 0x7b, 0x5a, 0xab, 0x09, 0x52, 0x9f, 0xdf, 0x25, 0x66, 0xeb, 0x79, 0xaa, 0x78, 0x38, 0x09,
	0x49, 0xf5, 0x04, 0x3b, 0x85, 0x38, 0x15, 0x2b, 0x92, 0x22, 0x2d, 0x59, 0x94, 0x7c, 0x06, 0x10,
	0xbd, 0x28, 0x94, 0xd4, 0x40, 0x5f, 0xef, 0x6a, 0x11, 0x3b, 0x83, 0x7f, 0x54, 0x95, 0xb5, 0xa7,
	0xc7, 0xa4, 0x2d, 0x32, 0xa5, 0x3e, 0x84, 0x5c, 0xf3, 0xd0, 0x68, 0x0e, 0xb3, 0x1b, 0x80, 0x85,
	0xcc, 0x0f, 0xf9, 0x16, 0x37, 0x68, 0x4c, 0x47, 0xb7, 0x27, 0x26, 0xf2, 0xd4, 0x0b, 0xcb, 0x46,
	0x4f, 0x92, 0xc3, 0xd0, 0x23, 0x76, 0x01, 0x30, 0x13, 0x7b, 0xa9, 0x50, 0x87, 0x35, 0x23, 0x35,
	0x18, 0xb2, 0x36, 0x68, 0x9e, 0xba, 0xb1, 0x1c, 0x66, 0x13, 0x18, 0xdd, 0xaf, 0x56, 0xa8, 0xd4,
	0x23, 0x1e, 0x70, 0x6b, 0x27, 0x6b, 0x52, 0xc9, 0x77, 0x00, 0xb1, 0xd9, 0x0d, 0x19, 0x99, 0xaa,
	0x69, 0x54, 0x33, 0x64, 0xe4, 0xb6, 0xe8, 0x8c, 0x1c, 0xd6, 0xf9, 0x85, 0xaa, 0xf4, 0xd6, 0x5c,
	0x7e, 0x8b, 0xd9, 0x25, 0x8c, 0x4d, 0xed, 0xb7, 0x17, 0xe9, 0x8e, 0x0e, 0x4b, 0xe7, 0x9e, 0x89,
	0xb2, 0xc2, 0xb2, 0xe2, 0x7d, 0x73, 0x6e, 0x0b, 0xd9, 0x35, 0x45, 0x2c, 0x0a, 0x2c, 0x2b, 0xc5,
	0x63, 0xbd, 0xbf, 0xb1, 0xdd, 0x9f, 0xa5, 0x97, 0x5e, 0xd7, 0xc7, 0xcf, 0x0b, 0x54, 0x55, 0x56,
	0xec, 0xf8, 0xc0, 0x3c, 0x0d, 0x4f, 0x24, 0x5f, 0x01, 0x99, 0xe8, 0x56, 0xea, 0xb4, 0xa5, 0x3f,
	0x75, 0x4d, 0xb4, 0x12, 0xf5, 0xfe, 0x4c, 0x14, 0x1e, 0x4d, 0xd4, 0x9a, 0x25, 0xea, 0xcc, 0xf2,
	0x7b, 0xde, 0xe4, 0x15, 0x62, 0x73, 0xc2, 0xd6, 0x71, 0x83, 0xce, 0x71, 0xdb, 0x0f, 0xa3, 0x77,
	0xec, 0x61, 0xd8, 0xff, 0xc5, 0xfd, 0x05, 0x1e, 0xbf, 0xc5, 0x7a, 0x7d, 0x77, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0x62, 0x6e, 0x80, 0x82, 0x03, 0x00, 0x00,
}
